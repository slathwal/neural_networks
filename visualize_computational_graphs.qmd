---
title: Visualize computational graphs using graphviz package
author: Shefali Lathwal
date: 2025-06-05
date-modified: last-modified
format: html
toc: true
echo: true
jupyter: cs224n
---
Thank you to Andrej Karpathy and his code for how to draw a computational graph given in the video, [The spelled out intro to neural networks and backpropagation](https://www.youtube.com/watch?v=VMj-3S1tku0&list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ&index=1).

# Visualize computational graphs using Graphviz

Example of a simple graph
```{python}
from graphviz import Digraph
from IPython.display import Markdown

# Create a graph object
graph = Digraph(name = "My first graph", comment = "some comment", graph_attr = {"rankdir": 'LR'})

# Add nodes and edges to the graph
graph.node("A", label = "node A")
graph.node("B", label = "node B")
graph.node("C", label = "node C")

#graph.edges(["AB", "BC", "CA"])
graph.edge("A", "B", label="AB")
graph.edge("B", "C", label = "BC")
graph.edge("A", "C", label= "AC")
Markdown(graph.source)
```

```{python}
graph
```

```{python}
graph.body, graph.comment, graph.name, graph.filename
```

# Define a class that keeps track of operations and dependents of an object

```{python}
class Value():
    "A class to store single values and their gradients that can be used to build neural networks"

    # We need to track which elements the current object depends on
    def __init__(self, data, _children = (), _op = "", label =''):
        self.data = data
        self._prev = set(_children)
        self._op = _op
        self.label = label
        
    def __repr__(self):
        "Add a string representation of the class"
        return f'Value(data: {self.data}, operator: {self._op})'

    def __add__(self, other):
        out = Value(self.data + other.data, _children = (self, other), _op = "+")
        return out

    def __mul__(self, other):
        out = Value(self.data * other.data, _children = (self, other), _op = "*")
        return out

```



# Build a computational graph to visualize nodes with mathematical operations

```{python}
from graphviz import Digraph
def trace(root):
    nodes, edges = set(), set()
    def build(v):
        #print("\ncalling build for:", v)
        if v not in nodes:
            #print("add node for:", v)
            nodes.add(v)
            #print("children:", v._prev)
            for child in v._prev:
                #print("add child:",child)
                edges.add((child, v)) # Add a tuple going from child to parent
                build(child)

    build(root)
    return nodes, edges
#trace(f)
def draw_dot(root, label_placement = "v"):
    graph = Digraph(graph_attr={'rankdir': 'LR'})
    nodes, edges = trace(root)

    for n in nodes:
        uid = str(id(n))
        if label_placement == "v":
            label_string = '{%s | data: %.4f}' %(n.label, n.data) # vertical separators between label values
            print(label_string)
        else:
            label_string = f"{n.label} | data: {n.data:.4f}" # Horizontal separator between label values in the node.
        graph.node(name = uid, label = label_string, shape = "record")

        # If n has an operator:
        if n._op:
            graph.node(name = uid+n._op, label = n._op)
            # ccreate an edge from operator node to this node's data
            graph.edge(uid+n._op, uid)

    for n1, n2 in edges:
        "Connect n1 to op node of n2"
        graph.edge(str(id(n1)), str(id(n2))+n2._op)

    return graph
```

# Perform some computations and visualize them
```{python}
a = Value(2.0, label = "a")
b = Value(3.0, label = "b")
c = a*b; c.label = "c"
d = Value(-1.0, label = "d")
e = c + d; e.label = "e"
f = c+c; f.label = "f"
g = a + b + c; g.label = "g"
```

```{python}
draw_dot(a)
```

```{python}
draw_dot(c)
```

```{python}
draw_dot(e)
```

```{python}
draw_dot(f) # If two same nodes contribute, they get drawn on top of each other because they have the same id.
```

```{python}
draw_dot(g)
```

```{python}
draw_dot(g, label_placement="h")
```